从组长的仓库clone之后，在本地项目下鼠标右键打开git操作指令对话框
git branch查看分支数（这个时候一般只有master分支）

然后使用命令从远程再拉两个分支
这里必须切到master分支
git fetch origin develop:develop
git fetch origin yourname:yourname
这样就把主开发分支和属于你自己的分支在本地创建了，但是还没有和远程连接起来，使用下面的命令将这两个分支与远程连接起来:

git branch --set-upstream-to=origin/develop develop
git branch --set-upstream-to=origin/develop yourname

这样你就可以之间提交代码到GitHub上的仓库了。

在自己的分支上向组长仓库的自己分支提交代码的操作为：
git add .
git commit -m "message"   //上面两个为常规本地保存和提交操作
git pull origin yourname    //在提交前先pull确保其他组员更新的代码加载到了自己的本地，这个操作后运行代码检查无误后再进行下面的操作
git push origin yourname    //确认无误后提交 一般组员合代码都是在develop上 所以yourname一般为develop

我们项目的最新进展都是在develop上的，所以你向develop上提交时要得到leader的允许。

我们自己在本地写的时候必须在以自己命名的那个分支上写，不要随便的污染主开发分支develop，只有你觉得你负责的这个功能没什么问题时，你将yourname分支上的代码合并到你本地的develop分支上

假如说现在有一个人完成了他的部分功能，他就可以向develop上提交这个代码，leader检查后合并到develop上，这时其他人就落后了一个版本，这时候，其他所有人都得切换到develop分支上(使用命令git checkout develop)执行git pull,将这个新的功能更新到本地，但是你一直都是在yourname上开发的，所以要将新pull下来的内容合并到yourname分支上，使用git merge yourname,然后git checkout yourname继续开发

push的时候情况就更复杂了，一定要仔细仔细仔细仔细的看下面这篇文章
https://juejin.im/entry/56263cfd00b0023ca69de5ec
